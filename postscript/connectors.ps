%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.0-20091004-56-g11921dc
%%CreationDate: Mon Mar  7 17:34:03 2011
%%Title: /home/jlamothe/gaf/arduino-0-10v-shield/connectors.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
42800 49000 42800 48500 10 line
gsave
false true false false 260.000000 [(RST) ] 90 42800 48445 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 90 42750 48595 180.555557 text
grestore
43000 49000 43000 48500 10 line
gsave
false true false false 260.000000 [(3V3) ] 90 43000 48445 180.555557 text
grestore
gsave
false false false false 260.000000 [(2) ] 90 42950 48595 180.555557 text
grestore
43200 49000 43200 48500 10 line
gsave
false true false false 260.000000 [(5V) ] 90 43200 48445 180.555557 text
grestore
gsave
false false false false 260.000000 [(3) ] 90 43150 48595 180.555557 text
grestore
43400 49000 43400 48500 10 line
gsave
false true false false 260.000000 [(GND) ] 90 43400 48445 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 90 43350 48595 180.555557 text
grestore
43600 49000 43600 48500 10 line
gsave
false true false false 260.000000 [(GND) ] 90 43600 48445 180.555557 text
grestore
gsave
false false false false 260.000000 [(5) ] 90 43550 48595 180.555557 text
grestore
43800 49000 43800 48500 10 line
gsave
false true false false 260.000000 [(VIN) ] 90 43800 48445 180.555557 text
grestore
gsave
false false false false 260.000000 [(6) ] 90 43750 48595 180.555557 text
grestore
44800 46600 44300 46600 10 line
gsave
false true false false 260.000000 [(IO0) ] 0 44245 46595 180.555557 text
grestore
gsave
false false false false 260.000000 [(13) ] 0 44395 46645 180.555557 text
grestore
44800 46400 44300 46400 10 line
gsave
false true false false 260.000000 [(IO1) ] 0 44245 46395 180.555557 text
grestore
gsave
false false false false 260.000000 [(14) ] 0 44395 46445 180.555557 text
grestore
44800 46200 44300 46200 10 line
gsave
false true false false 260.000000 [(IO2) ] 0 44245 46195 180.555557 text
grestore
gsave
false false false false 260.000000 [(15) ] 0 44395 46245 180.555557 text
grestore
44800 46000 44300 46000 10 line
gsave
false true false false 260.000000 [(IO3) ] 0 44245 45995 180.555557 text
grestore
gsave
false false false false 260.000000 [(16) ] 0 44395 46045 180.555557 text
grestore
44800 45800 44300 45800 10 line
gsave
false true false false 260.000000 [(IO4) ] 0 44245 45795 180.555557 text
grestore
gsave
false false false false 260.000000 [(17) ] 0 44395 45845 180.555557 text
grestore
44800 45600 44300 45600 10 line
gsave
false true false false 260.000000 [(IO5) ] 0 44245 45595 180.555557 text
grestore
gsave
false false false false 260.000000 [(18) ] 0 44395 45645 180.555557 text
grestore
44800 45400 44300 45400 10 line
gsave
false true false false 260.000000 [(IO6) ] 0 44245 45395 180.555557 text
grestore
gsave
false false false false 260.000000 [(19) ] 0 44395 45445 180.555557 text
grestore
44800 45200 44300 45200 10 line
gsave
false true false false 260.000000 [(IO7) ] 0 44245 45195 180.555557 text
grestore
gsave
false false false false 260.000000 [(20) ] 0 44395 45245 180.555557 text
grestore
44800 45000 44300 45000 10 line
gsave
false true false false 260.000000 [(IO8) ] 0 44245 44995 180.555557 text
grestore
gsave
false false false false 260.000000 [(21) ] 0 44395 45045 180.555557 text
grestore
44800 44800 44300 44800 10 line
gsave
false true false false 260.000000 [(IO9) ] 0 44245 44795 180.555557 text
grestore
gsave
false false false false 260.000000 [(22) ] 0 44395 44845 180.555557 text
grestore
44800 44600 44300 44600 10 line
gsave
false true false false 260.000000 [(IO10) ] 0 44245 44595 180.555557 text
grestore
gsave
false false false false 260.000000 [(23) ] 0 44395 44645 180.555557 text
grestore
44800 44400 44300 44400 10 line
gsave
false true false false 260.000000 [(IO11) ] 0 44245 44395 180.555557 text
grestore
gsave
false false false false 260.000000 [(24) ] 0 44395 44445 180.555557 text
grestore
44800 44200 44300 44200 10 line
gsave
false true false false 260.000000 [(IO12) ] 0 44245 44195 180.555557 text
grestore
gsave
false false false false 260.000000 [(25) ] 0 44395 44245 180.555557 text
grestore
44800 44000 44300 44000 10 line
gsave
false true false false 260.000000 [(IO13) ] 0 44245 43995 180.555557 text
grestore
gsave
false false false false 260.000000 [(26) ] 0 44395 44045 180.555557 text
grestore
44800 48000 44300 48000 10 line
gsave
false true false false 260.000000 [(A0) ] 0 44245 47995 180.555557 text
grestore
gsave
false false false false 260.000000 [(7) ] 0 44395 48045 180.555557 text
grestore
44800 47800 44300 47800 10 line
gsave
false true false false 260.000000 [(A1) ] 0 44245 47795 180.555557 text
grestore
gsave
false false false false 260.000000 [(8) ] 0 44395 47845 180.555557 text
grestore
44800 47600 44300 47600 10 line
gsave
false true false false 260.000000 [(A2) ] 0 44245 47595 180.555557 text
grestore
gsave
false false false false 260.000000 [(9) ] 0 44395 47645 180.555557 text
grestore
44800 47400 44300 47400 10 line
gsave
false true false false 260.000000 [(A3) ] 0 44245 47395 180.555557 text
grestore
gsave
false false false false 260.000000 [(10) ] 0 44395 47445 180.555557 text
grestore
44800 47200 44300 47200 10 line
gsave
false true false false 260.000000 [(A4) ] 0 44245 47195 180.555557 text
grestore
gsave
false false false false 260.000000 [(11) ] 0 44395 47245 180.555557 text
grestore
44800 47000 44300 47000 10 line
gsave
false true false false 260.000000 [(A5) ] 0 44245 46995 180.555557 text
grestore
gsave
false false false false 260.000000 [(12) ] 0 44395 47045 180.555557 text
grestore
43400 43000 43400 43500 10 line
gsave
false false false false 260.000000 [(GND) ] 90 43400 43555 180.555557 text
grestore
gsave
false true false false 260.000000 [(27) ] 90 43350 43405 180.555557 text
grestore
43200 43000 43200 43500 10 line
gsave
false false false false 260.000000 [(AREF) ] 90 43200 43555 180.555557 text
grestore
gsave
false true false false 260.000000 [(28) ] 90 43150 43405 180.555557 text
grestore
42300 43500 44300 43500 10 line
44300 43500 44300 48500 10 line
44300 48500 42300 48500 10 line
42300 48500 42300 43500 10 line
grestore
gsave
false false false false 260.000000 [(U101) ] 0 44400 48595 180.555557 text
grestore
gsave
46700 46000 46900 46000 10 line
46900 46100 46900 45900 10 line
46900 46100 47400 46100 10 line
47400 46100 47500 46000 10 line
47500 46000 47400 45900 10 line
47400 45900 46900 45900 10 line
grestore
gsave
false false true false 260.000000 [(pwm3) ] 0 47600 46000 180.555557 text
grestore
gsave
46700 45400 46900 45400 10 line
46900 45500 46900 45300 10 line
46900 45500 47400 45500 10 line
47400 45500 47500 45400 10 line
47500 45400 47400 45300 10 line
47400 45300 46900 45300 10 line
grestore
gsave
false false true false 260.000000 [(pwm6) ] 0 47600 45400 180.555557 text
grestore
gsave
46700 45600 46900 45600 10 line
46900 45700 46900 45500 10 line
46900 45700 47400 45700 10 line
47400 45700 47500 45600 10 line
47500 45600 47400 45500 10 line
47400 45500 46900 45500 10 line
grestore
gsave
false false true false 260.000000 [(pwm5) ] 0 47600 45600 180.555557 text
grestore
gsave
46700 44800 46900 44800 10 line
46900 44900 46900 44700 10 line
46900 44900 47400 44900 10 line
47400 44900 47500 44800 10 line
47500 44800 47400 44700 10 line
47400 44700 46900 44700 10 line
grestore
gsave
false false true false 260.000000 [(pwm9) ] 0 47600 44800 180.555557 text
grestore
gsave
46700 44600 46900 44600 10 line
46900 44700 46900 44500 10 line
46900 44700 47400 44700 10 line
47400 44700 47500 44600 10 line
47500 44600 47400 44500 10 line
47400 44500 46900 44500 10 line
grestore
gsave
false false true false 260.000000 [(pwm10) ] 0 47600 44600 180.555557 text
grestore
gsave
46700 44400 46900 44400 10 line
46900 44500 46900 44300 10 line
46900 44500 47400 44500 10 line
47400 44500 47500 44400 10 line
47500 44400 47400 44300 10 line
47400 44300 46900 44300 10 line
grestore
gsave
false false true false 260.000000 [(pwm11) ] 0 47600 44400 180.555557 text
grestore
44800 46000 46700 46000 10 line
44800 45600 46700 45600 10 line
44800 45400 46700 45400 10 line
44800 44800 46700 44800 10 line
44800 44600 46700 44600 10 line
44800 44400 46700 44400 10 line
gsave
43800 49500 43800 49700 10 line
43650 49700 43950 49700 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 43675 49750 144.444443 text
grestore
grestore
gsave
43400 42300 43400 42500 10 line
43300 42300 43500 42300 10 line
43355 42250 43445 42250 10 line
43380 42210 43420 42210 10 line
grestore
43400 43000 43400 42500 10 line
43800 49500 43800 49000 10 line
gsave
false false false false 260.000000 [(Connectors) ] 0 50000 40700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Jonathan Lamothe) ] 0 53900 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(connectors.sch) ] 0 50000 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 50500 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(3) ] 0 52100 40100 180.555557 text
grestore
gsave
53400 47000 53100 47000 10 line
gsave
false true false false 208.000000 [(2) ] 0 54550 46950 144.444443 text
grestore
53400 46400 53100 46400 10 line
gsave
false true false false 208.000000 [(4) ] 0 54550 46350 144.444443 text
grestore
53400 45800 53100 45800 10 line
gsave
false true false false 208.000000 [(6) ] 0 54550 45750 144.444443 text
grestore
53400 47300 53100 47300 10 line
gsave
false true false false 208.000000 [(1) ] 0 54550 47250 144.444443 text
grestore
53400 46700 53100 46700 10 line
gsave
false true false false 208.000000 [(3) ] 0 54550 46650 144.444443 text
grestore
53400 46100 53100 46100 10 line
gsave
false true false false 208.000000 [(5) ] 0 54550 46050 144.444443 text
grestore
53400 47300 54300 47300 10 line
53400 47000 54300 47000 10 line
53400 46700 54300 46700 10 line
53400 46400 54300 46400 10 line
53400 46100 54300 46100 10 line
53400 45800 54300 45800 10 line
54300 45600 54800 45600 10 line
54800 45600 54800 47500 10 line
54800 47500 54300 47500 10 line
54300 47500 54300 45600 10 line
grestore
gsave
false true false false 260.000000 [(CONN101) ] 0 54700 47600 180.555557 text
grestore
gsave
52000 47300 52200 47300 10 line
51400 47400 51400 47200 10 line
51400 47400 51900 47400 10 line
51900 47400 52000 47300 10 line
52000 47300 51900 47200 10 line
51900 47200 51400 47200 10 line
grestore
gsave
false true true false 260.000000 [(out3) ] 0 51300 47300 180.555557 text
grestore
gsave
52000 47000 52200 47000 10 line
51400 47100 51400 46900 10 line
51400 47100 51900 47100 10 line
51900 47100 52000 47000 10 line
52000 47000 51900 46900 10 line
51900 46900 51400 46900 10 line
grestore
gsave
false true true false 260.000000 [(out5) ] 0 51300 47000 180.555557 text
grestore
gsave
52000 46700 52200 46700 10 line
51400 46800 51400 46600 10 line
51400 46800 51900 46800 10 line
51900 46800 52000 46700 10 line
52000 46700 51900 46600 10 line
51900 46600 51400 46600 10 line
grestore
gsave
false true true false 260.000000 [(out6) ] 0 51300 46700 180.555557 text
grestore
gsave
52000 46400 52200 46400 10 line
51400 46500 51400 46300 10 line
51400 46500 51900 46500 10 line
51900 46500 52000 46400 10 line
52000 46400 51900 46300 10 line
51900 46300 51400 46300 10 line
grestore
gsave
false true true false 260.000000 [(out9) ] 0 51300 46400 180.555557 text
grestore
gsave
52000 46100 52200 46100 10 line
51400 46200 51400 46000 10 line
51400 46200 51900 46200 10 line
51900 46200 52000 46100 10 line
52000 46100 51900 46000 10 line
51900 46000 51400 46000 10 line
grestore
gsave
false true true false 260.000000 [(out10) ] 0 51300 46100 180.555557 text
grestore
gsave
52000 45800 52200 45800 10 line
51400 45900 51400 45700 10 line
51400 45900 51900 45900 10 line
51900 45900 52000 45800 10 line
52000 45800 51900 45700 10 line
51900 45700 51400 45700 10 line
grestore
gsave
false true true false 260.000000 [(out11) ] 0 51300 45800 180.555557 text
grestore
52200 47300 53100 47300 10 line
52200 47000 53100 47000 10 line
52200 46700 53100 46700 10 line
52200 46400 53100 46400 10 line
52200 46100 53100 46100 10 line
52200 45800 53100 45800 10 line
showpage
%%End
